# Loop once: m0, ok, m1, ok
M?m0
recv_m
A!a0
M?m1
recv_m
A!a1
--
# Loop twice: m0, ok, m1, ok
M?m0
recv_m
A!a0
M?m1
recv_m
A!a1
M?m0
recv_m
A!a0
M?m1
recv_m
A!a1
--
# Resend m0 (due to loss): m0, timeout, m0, timeout, m0, ok, m1, ok
# NOTE: In this case, receiver p2's timeout is longer than sender p1's timeout, therefore p2 cannot tell that m0 was lost (twice).
M?m0
recv_m
A!a0
M?m1
recv_m
A!a1
--
# Resend m0 (due to bad sender timeout): m0, timeout, m0, ok, m1, ok
# NOTE: In this case, receiver receives m0 twice, since m0 was never lost and the sender re-transmitted m0 thinking that it was lost (i.e., because receiver is too slow to respond). Note that even though the receiver receives m0 twice, it discards the second copy before sending the ack for the first copy, therefore it only sends one ack for two copies of m0.
M?m0
recv_m
M?m0
A!a0
M?m1
recv_m
A!a1
