#if 0
Do not attempt to compile this file with a Java compiler such as javac.
You first need to preprocess it with cpp, the C preprocessor.
The correct way to build the system is to run 'make'.
#endif



  /** Return the greatest common divisor of the two arguments. */
  public static INT gcd(INT a, INT b) {
  #ifdef GCD_DOUBLE
    if (a == Double.POSITIVE_INFINITY
        || a == Double.NEGATIVE_INFINITY
        || Double.isNaN(a)
        || b == Double.POSITIVE_INFINITY
        || b == Double.NEGATIVE_INFINITY
        || Double.isNaN(b)) {
      return Double.NaN;
    }
  #endif
    // Euclid's method
    if (b == 0)
      return (Math.abs(a));
    a = Math.abs(a);
    b = Math.abs(b);
    while (b != 0) {
      INT tmp = b;
      b = a % b;
      a = tmp;
    }
    return a;
  }

  /** Return the greatest common divisor of the elements of INT array a. */
  public static INT gcd(INT[] a) {
    // Euclid's method
    if (a.length == 0) {
      return 0;
    }
    INT result = a[0];
    for (int i=1; i<a.length; i++) {
      result = gcd(a[i], result);
      if ((result == 1) || (result == 0))
        return result;
    }
    return result;
  }

  /**
   * Return the gcd (greatest common divisor) of the differences
   * between the elements of INT array a.
   **/
  public static INT gcd_differences(INT[] a) {
    // Euclid's method
    if (a.length < 2) {
      return 0;
    }
    INT result = a[1] - a[0];
    for (int i=2; i<a.length; i++) {
      result = gcd(a[i] - a[i-1], result);
      if ((result == 1) || (result == 0))
        return result;
    }
    return result;
  }
