import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class Math__BigFloat_bdiv__39 extends Splitter { 

  public String condition() { 
    return "orig($p) != 0 && orig($p) != orig($x._p) && ((orig($y._m.value.deref).length == 1 && orig($y._e.value.deref).length == 1 && orig($y._e.value.deref)[0] == 0 && orig($y._m.value.deref)[0] == 1) || (orig($y._m.value.deref).length == 1 && orig($y._m.value.deref)[0] == 0) || (orig($x._m.value.deref).length == 1 && orig($x._m.value.deref)[0] == 0)) && (orig($x.sign).equals(\"+\") || orig($x.sign).equals(\"-\")) && (orig($y.sign).equals(\"+\") || orig($y.sign).equals(\"-\"))"; 
  } 


  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bdiv__39() { } 
  public Math__BigFloat_bdiv__39(Ppt ppt) { 
  }

  public Splitter instantiate(Ppt ppt) { 
    return new Math__BigFloat_bdiv__39(ppt); 
  } 

  public boolean valid() { 
    /* no variables were found */
    return false;
  } 

  public boolean test(ValueTuple vt) { 
    /* writeTestBody: 0 declarations */
    return(orig_$p!=0&&orig_$p!=orig_$x__p&&((orig_$y__m_value_deref.length==1&&orig_$y__e_value_deref.length==1&&orig_$y__e_value_deref[0]==0&&orig_$y__m_value_deref[0]==1)||(orig_$y__m_value_deref.length==1&&orig_$y__m_value_deref[0]==0)||(orig_$x__m_value_deref.length==1&&orig_$x__m_value_deref[0]==0))&&(orig_$x_sign.equals("+")||orig_$x_sign.equals("-"))&&(orig_$y_sign.equals("+")||orig_$y_sign.equals("-"))); 
  } 

  public String repr() { 
    return "Math__BigFloat_bdiv__39: "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
