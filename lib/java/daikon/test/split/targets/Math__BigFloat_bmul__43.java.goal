import daikon.*; 
import daikon.inv.*; 
import daikon.split.*; 

public final class Math__BigFloat_bmul__43 extends Splitter { 

  public String condition() { 
    return "orig($p) != 0 && return._p == 0 && (return.sign.equals(\"+\") || return.sign.equals(\"-\"))"; 
  } 

  VarInfo daikonreturn__p_varinfo; // return._p
  VarInfo daikonreturn_sign_varinfo; // return.sign

  static DummyInvariant dummyInvFactory;
  DummyInvariant dummyInv;

  public Math__BigFloat_bmul__43() { } 
  public Math__BigFloat_bmul__43(Ppt ppt) { 
    daikonreturn__p_varinfo = ppt.find_var_by_name("return._p");
    daikonreturn_sign_varinfo = ppt.find_var_by_name("return.sign");
  }

  public Splitter instantiate(Ppt ppt) { 
    return new Math__BigFloat_bmul__43(ppt); 
  } 

  public boolean valid() { 
    return (daikonreturn__p_varinfo != null) && (daikonreturn__p_varinfo != null);
  } 

  public boolean test(ValueTuple vt) { 
    /* writeTestBody: 2 declarations */
    long daikonreturn__p = daikonreturn__p_varinfo.getIntValue(vt);
    String daikonreturn_sign = daikonreturn_sign_varinfo.getStringValue(vt);
    return(orig_$p!=0&&daikonreturn__p==0&&(daikonreturn_sign.equals("+")||daikonreturn_sign.equals("-"))); 
  } 

  public String repr() { 
    return "Math__BigFloat_bmul__43: "
      + "daikonreturn__p_varinfo = " + daikonreturn__p_varinfo.repr() + " "
      + "daikonreturn_sign_varinfo = " + daikonreturn_sign_varinfo.repr() + " "
      ;
  } 

  public void makeDummyInvariant(DummyInvariant inv) { 
    dummyInvFactory = inv; 
  } 

  public void instantiateDummy(PptTopLevel ppt) { 
    dummyInv = null; 
    VarInfo daikonreturn__p_vi = ppt.find_var_by_name("return._p");
    VarInfo daikonreturn_sign_vi = ppt.find_var_by_name("return.sign");
    if (daikonreturn__p_vi != null && daikonreturn_sign_vi != null) {
      dummyInv = dummyInvFactory.instantiate(ppt, new VarInfo[] {daikonreturn__p_vi, daikonreturn_sign_vi});
    }
  } 

  public DummyInvariant getDummyInvariant() { 
    return dummyInv; 
  } 

  public int[] getIntArray(long[] longArray) { 
    int[] intArray = new int[longArray.length]; 
    for (int i = 0; i < intArray.length; i++) { 
      intArray[i] = (int) longArray[i]; 
    } 
    return intArray; 
  } 

} 
