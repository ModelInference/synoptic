REPLACE
mul(RatNum arg)
new RatNum(this.numer*arg.numer,                            this.denom*arg.denom)
toString()
debugPrint()
hashCode()
this.numer*2 + this.denom*3
isNegative()
(this.denom != 0)&&(this.numer < 0)
debugPrint()
"RatNum<numer:"+this.numer+" denom:"+this.denom+">"
isPositive()
(this.denom == 0)||(this.numer > 0)
isNaN()
(denom == 0)
sub(RatNum arg)
this.add(arg.negate())
add(RatNum arg)
new RatNum(this.numer*arg.denom + arg.numer*this.denom,                            this.denom*arg.denom)
negate()
new RatNum(- this.numer , this.denom)

PPT_NAME PolyCalc.RatNum.parse
ratStr.equals("NaN")
slashLoc == -1

PPT_NAME PolyCalc.RatNum.approx
isNaN()

PPT_NAME PolyCalc.RatNum.toString
debugPrint()

PPT_NAME PolyCalc.RatNum.sub
this.add(arg.negate())

PPT_NAME PolyCalc.RatNum.negate
new RatNum(- this.numer , this.denom)

PPT_NAME PolyCalc.RatNum.add
new RatNum(this.numer*arg.denom + arg.numer*this.denom,                            this.denom*arg.denom)

PPT_NAME PolyCalc.RatNum.mul
new RatNum(this.numer*arg.numer,                            this.denom*arg.denom)

PPT_NAME PolyCalc.RatNum.RatNum
d == 0
denom < 0

PPT_NAME PolyCalc.RatNum.debugPrint
"RatNum<numer:"+this.numer+" denom:"+this.denom+">"

PPT_NAME PolyCalc.RatNum.hashCode
this.numer*2 + this.denom*3

PPT_NAME PolyCalc.RatNum.unparse
isNaN()
denom != 1

PPT_NAME PolyCalc.RatNum.equals
obj instanceof RatNum
this.isNaN()&& rn.isNaN()

PPT_NAME PolyCalc.RatNum.compareTo
this.isNaN()&& rn.isNaN()
this.isNaN()
rn.isNaN()

PPT_NAME PolyCalc.RatNum.isPositive
(this.denom == 0)||(this.numer > 0)

PPT_NAME PolyCalc.RatNum.isNegative
(this.denom != 0)&&(this.numer < 0)

PPT_NAME PolyCalc.RatNum.div
arg.isNaN()

PPT_NAME PolyCalc.RatNum.isNaN
(denom == 0)

PPT_NAME PolyCalc.RatNum.gcd
b == 0
b != 0

