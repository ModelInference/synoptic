//
// Generated by JTB 1.3.2
//

package jtb.visitor;

import java.io.*;
import java.util.Enumeration;
import java.util.Vector;
import jtb.syntaxtree.NodeToken;


public class TreeDumper extends DepthFirstVisitor
{

    public TreeDumper()
    {
        curLine = 1;
        curColumn = 1;
        startAtNextToken = false;
        printSpecials = true;
        out = new PrintWriter(System.out, true);
    }

    public TreeDumper(Writer o)
    {
        curLine = 1;
        curColumn = 1;
        startAtNextToken = false;
        printSpecials = true;
        out = new PrintWriter(o, true);
    }

    public TreeDumper(OutputStream o)
    {
        curLine = 1;
        curColumn = 1;
        startAtNextToken = false;
        printSpecials = true;
        out = new PrintWriter(o, true);
    }

    public void flushWriter()
    {
        out.flush();
    }

    public void printSpecials(boolean b)
    {
        printSpecials = b;
    }

    public void startAtNextToken()
    {
        startAtNextToken = true;
    }

    public void resetPosition()
    {
        curLine = curColumn = 1;
    }

    public void visit(NodeToken n)
    {
        if(n.beginLine == -1 || n.beginColumn == -1)
        {
            printToken(n.tokenImage);
            return;
        }
        if(printSpecials && n.numSpecials() > 0)
        {
            for(Enumeration e = n.specialTokens.elements(); e.hasMoreElements(); visit((NodeToken)e.nextElement()));
        }
        if(startAtNextToken)
        {
            curLine = n.beginLine;
            curColumn = 1;
            startAtNextToken = false;
            if(n.beginColumn < curColumn)
                out.println();
        }
        if(n.beginLine < curLine)
            throw new IllegalStateException((new StringBuilder()).append("at token \"").append(n.tokenImage).append("\", n.beginLine = ").append(Integer.toString(n.beginLine)).append(", curLine = ").append(Integer.toString(curLine)).toString());
        if(n.beginLine == curLine && n.beginColumn < curColumn)
            throw new IllegalStateException((new StringBuilder()).append("at token \"").append(n.tokenImage).append("\", n.beginColumn = ").append(Integer.toString(n.beginColumn)).append(", curColumn = ").append(Integer.toString(curColumn)).toString());
        if(curLine < n.beginLine)
        {
            curColumn = 1;
            for(; curLine < n.beginLine; curLine++)
                out.println();

        }
        for(; curColumn < n.beginColumn; curColumn++)
            out.print(" ");

        printToken(n.tokenImage);
    }

    private void printToken(String s)
    {
        for(int i = 0; i < s.length(); i++)
        {
            if(s.charAt(i) == '\n')
            {
                curLine++;
                curColumn = 1;
            } else
            {
                curColumn++;
            }
            out.print(s.charAt(i));
        }

        out.flush();
    }

    protected PrintWriter out;
    private int curLine;
    private int curColumn;
    private boolean startAtNextToken;
    private boolean printSpecials;
}
