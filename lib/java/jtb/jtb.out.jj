//
// Generated by JTB 1.3.2
//

options {
   JAVA_UNICODE_ESCAPE = true;
   ERROR_REPORTING = false;
   STATIC = false;
}

PARSER_BEGIN(JavaParser)
import java.io.*;
import jtb.syntaxtree.*;
import java.util.Vector;


public class JavaParser 
{
   int global_modifiers;
   static public final class ModifierSet 
   {
      public static final int PUBLIC = 0x0001;
      public static final int PROTECTED = 0x0002;
      public static final int PRIVATE = 0x0004;
      public static final int ABSTRACT = 0x0008;
      public static final int STATIC = 0x0010;
      public static final int FINAL = 0x0020;
      public static final int SYNCHRONIZED = 0x0040;
      public static final int NATIVE = 0x0080;
      public static final int TRANSIENT = 0x0100;
      public static final int VOLATILE = 0x0200;
      public static final int STRICTFP = 0x1000;
      public boolean isPublic(int modifiers)
      {
         return (modifiers & PUBLIC) != 0;
      }
      public boolean isProtected(int modifiers)
      {
         return (modifiers & PROTECTED) != 0;
      }
      public boolean isPrivate(int modifiers)
      {
         return (modifiers & PRIVATE) != 0;
      }
      public boolean isStatic(int modifiers)
      {
         return (modifiers & STATIC) != 0;
      }
      public boolean isAbstract(int modifiers)
      {
         return (modifiers & ABSTRACT) != 0;
      }
      public boolean isFinal(int modifiers)
      {
         return (modifiers & FINAL) != 0;
      }
      public boolean isNative(int modifiers)
      {
         return (modifiers & NATIVE) != 0;
      }
      public boolean isStrictfp(int modifiers)
      {
         return (modifiers & STRICTFP) != 0;
      }
      public boolean isSynchronized(int modifiers)
      {
         return (modifiers & SYNCHRONIZED) != 0;
      }
      public boolean isTransient(int modifiers)
      {
         return (modifiers & TRANSIENT) != 0;
      }
      public boolean isVolatile(int modifiers)
      {
         return (modifiers & VOLATILE) != 0;
      }
      static int removeModifier(int modifiers,int mod)
      {
         return modifiers & ~mod;
      }
   }
   public JavaParser(String fileName)
   {
      this(System.in);
      try
      {
         ReInit(new FileInputStream(new File(fileName)));
      }
      catch (Exception e)
      {
         e.printStackTrace();
      }
   }
   public static void main(String args[])
   {
      JavaParser parser;
      if ( args.length == 0 )
      {
         System.out.println("Java Parser Version 1.1:  Reading from standard input . . .");
         parser = new JavaParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("Java Parser Version 1.1:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new JavaParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("Java Parser Version 1.1:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("Java Parser Version 1.1:  Usage is one of:");
            System.out.println("         java JavaParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaParser inputfile");
            return;
         }
      try
      {
         parser.CompilationUnit();
         System.out.println("Java Parser Version 1.1:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println(e.getMessage());
         System.out.println("Java Parser Version 1.1:  Encountered errors during parse.");
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      NodeToken node = new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);

      if ( t.specialToken == null )
         return node;

      Vector temp = new Vector();
      Token orig = t;

      while ( t.specialToken != null ) {
         t = t.specialToken;
         temp.addElement(new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn));
      }

      // Reverse the special token list
      for ( int i = temp.size() - 1; i >= 0; --i )
         node.addSpecial((NodeToken)temp.elementAt(i));

      node.trimSpecials();
      return node;
   }
}


PARSER_END(JavaParser)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

MORE :
{
   "//" : IN_SINGLE_LINE_COMMENT
   | <"/**" ~["/"]>
      {
         input_stream.backup(1);
      } : IN_FORMAL_COMMENT
   | "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT> SPECIAL_TOKEN :
{
   <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT
}

<IN_FORMAL_COMMENT> SPECIAL_TOKEN :
{
   <FORMAL_COMMENT: "*/"> : DEFAULT
}

<IN_MULTI_LINE_COMMENT> SPECIAL_TOKEN :
{
   <MULTI_LINE_COMMENT: "*/"> : DEFAULT
}

<IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT> MORE :
{
   <~[]>
}

TOKEN :
{
   <ABSTRACT: "abstract">
   | <ASSERT: "assert">
   | <BOOLEAN: "boolean">
   | <BREAK: "break">
   | <BYTE: "byte">
   | <CASE: "case">
   | <CATCH: "catch">
   | <CHAR: "char">
   | <CLASS: "class">
   | <CONST: "const">
   | <CONTINUE: "continue">
   | <_DEFAULT: "default">
   | <DO: "do">
   | <DOUBLE: "double">
   | <ELSE: "else">
   | <ENUM: "enum">
   | <EXTENDS: "extends">
   | <FALSE: "false">
   | <FINAL: "final">
   | <FINALLY: "finally">
   | <FLOAT: "float">
   | <FOR: "for">
   | <GOTO: "goto">
   | <IF: "if">
   | <IMPLEMENTS: "implements">
   | <IMPORT: "import">
   | <INSTANCEOF: "instanceof">
   | <INT: "int">
   | <INTERFACE: "interface">
   | <LONG: "long">
   | <NATIVE: "native">
   | <NEW: "new">
   | <NULL: "null">
   | <PACKAGE: "package">
   | <PRIVATE: "private">
   | <PROTECTED: "protected">
   | <PUBLIC: "public">
   | <RETURN: "return">
   | <SHORT: "short">
   | <STATIC: "static">
   | <STRICTFP: "strictfp">
   | <SUPER: "super">
   | <SWITCH: "switch">
   | <SYNCHRONIZED: "synchronized">
   | <THIS: "this">
   | <THROW: "throw">
   | <THROWS: "throws">
   | <TRANSIENT: "transient">
   | <TRUE: "true">
   | <TRY: "try">
   | <VOID: "void">
   | <VOLATILE: "volatile">
   | <WHILE: "while">
}

TOKEN :
{
   <INTEGER_LITERAL: <DECIMAL_LITERAL> (["l", "L"])? | <HEX_LITERAL> (["l", "L"])? | <OCTAL_LITERAL> (["l", "L"])?>
   | <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])*>
   | <#HEX_LITERAL: "0" ["x", "X"] (["0"-"9", "a"-"f", "A"-"F"])+>
   | <#OCTAL_LITERAL: "0" (["0"-"7"])*>
   | <FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f", "F", "d", "D"])? | "." (["0"-"9"])+ (<EXPONENT>)? (["f", "F", "d", "D"])? | (["0"-"9"])+ <EXPONENT> (["f", "F", "d", "D"])? | (["0"-"9"])+ (<EXPONENT>)? ["f", "F", "d", "D"]>
   | <#EXPONENT: ["e", "E"] (["+", "-"])? (["0"-"9"])+>
   | <CHARACTER_LITERAL: "'" ((~["'", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"]))) "'">
   | <STRING_LITERAL: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
}

TOKEN :
{
   <IDENTIFIER: <LETTER> (<PART_LETTER>)*>
   | <#LETTER: ["$", "A"-"Z", "_", "a"-"z", "\u00a2"-"\u00a5", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u021f", "\u0222"-"\u0233", "\u0250"-"\u02ad", "\u02b0"-"\u02b8", "\u02bb"-"\u02c1", "\u02d0"-"\u02d1", "\u02e0"-"\u02e4", "\u02ee", "\u037a", "\u0386", "\u0388"-"\u038a", "\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03d7", "\u03da"-"\u03f3", "\u0400"-"\u0481", "\u048c"-"\u04c4", "\u04c7"-"\u04c8", "\u04cb"-"\u04cc", "\u04d0"-"\u04f5", "\u04f8"-"\u04f9", "\u0531"-"\u0556", "\u0559", "\u0561"-"\u0587", "\u05d0"-"\u05ea", "\u05f0"-"\u05f2", "\u0621"-"\u063a", "\u0640"-"\u064a", "\u0671"-"\u06d3", "\u06d5", "\u06e5"-"\u06e6", "\u06fa"-"\u06fc", "\u0710", "\u0712"-"\u072c", "\u0780"-"\u07a5", "\u0905"-"\u0939", "\u093d", "\u0950", "\u0958"-"\u0961", "\u0985"-"\u098c", "\u098f"-"\u0990", "\u0993"-"\u09a8", "\u09aa"-"\u09b0", "\u09b2", "\u09b6"-"\u09b9", "\u09dc"-"\u09dd", "\u09df"-"\u09e1", "\u09f0"-"\u09f3", "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10", "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30", "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39", "\u0a59"-"\u0a5c", "\u0a5e", "\u0a72"-"\u0a74", "\u0a85"-"\u0a8b", "\u0a8d", "\u0a8f"-"\u0a91", "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9", "\u0abd", "\u0ad0", "\u0ae0", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28", "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b36"-"\u0b39", "\u0b3d", "\u0b5c"-"\u0b5d", "\u0b5f"-"\u0b61", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90", "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a", "\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4", "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5", "\u0bb7"-"\u0bb9", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10", "\u0c12"-"\u0c28", "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c60"-"\u0c61", "\u0c85"-"\u0c8c", "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9", "\u0cde", "\u0ce0"-"\u0ce1", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28", "\u0d2a"-"\u0d39", "\u0d60"-"\u0d61", "\u0d85"-"\u0d96", "\u0d9a"-"\u0db1", "\u0db3"-"\u0dbb", "\u0dbd", "\u0dc0"-"\u0dc6", "\u0e01"-"\u0e30", "\u0e32"-"\u0e33", "\u0e3f"-"\u0e46", "\u0e81"-"\u0e82", "\u0e84", "\u0e87"-"\u0e88", "\u0e8a", "\u0e8d", "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa"-"\u0eab", "\u0ead"-"\u0eb0", "\u0eb2"-"\u0eb3", "\u0ebd", "\u0ec0"-"\u0ec4", "\u0ec6", "\u0edc"-"\u0edd", "\u0f00", "\u0f40"-"\u0f47", "\u0f49"-"\u0f6a", "\u0f88"-"\u0f8b", "\u1000"-"\u1021", "\u1023"-"\u1027", "\u1029"-"\u102a", "\u1050"-"\u1055", "\u10a0"-"\u10c5", "\u10d0"-"\u10f6", "\u1100"-"\u1159", "\u115f"-"\u11a2", "\u11a8"-"\u11f9", "\u1200"-"\u1206", "\u1208"-"\u1246", "\u1248", "\u124a"-"\u124d", "\u1250"-"\u1256", "\u1258", "\u125a"-"\u125d", "\u1260"-"\u1286", "\u1288", "\u128a"-"\u128d", "\u1290"-"\u12ae", "\u12b0", "\u12b2"-"\u12b5", "\u12b8"-"\u12be", "\u12c0", "\u12c2"-"\u12c5", "\u12c8"-"\u12ce", "\u12d0"-"\u12d6", "\u12d8"-"\u12ee", "\u12f0"-"\u130e", "\u1310", "\u1312"-"\u1315", "\u1318"-"\u131e", "\u1320"-"\u1346", "\u1348"-"\u135a", "\u13a0"-"\u13f4", "\u1401"-"\u166c", "\u166f"-"\u1676", "\u1681"-"\u169a", "\u16a0"-"\u16ea", "\u1780"-"\u17b3", "\u17db", "\u1820"-"\u1877", "\u1880"-"\u18a8", "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45", "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f"-"\u1f7d", "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe", "\u1fc2"-"\u1fc4", "\u1fc6"-"\u1fcc", "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4", "\u1ff6"-"\u1ffc", "\u203f"-"\u2040", "\u207f", "\u20a0"-"\u20af", "\u2102", "\u2107", "\u210a"-"\u2113", "\u2115", "\u2119"-"\u211d", "\u2124", "\u2126", "\u2128", "\u212a"-"\u212d", "\u212f"-"\u2131", "\u2133"-"\u2139", "\u2160"-"\u2183", "\u3005"-"\u3007", "\u3021"-"\u3029", "\u3031"-"\u3035", "\u3038"-"\u303a", "\u3041"-"\u3094", "\u309d"-"\u309e", "\u30a1"-"\u30fe", "\u3105"-"\u312c", "\u3131"-"\u318e", "\u31a0"-"\u31b7", "\u3400"-"\u4db5", "\u4e00"-"\u9fa5", "\ua000"-"\ua48c", "\uac00"-"\ud7a3", "\uf900"-"\ufa2d", "\ufb00"-"\ufb06", "\ufb13"-"\ufb17", "\ufb1d", "\ufb1f"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3c", "\ufb3e", "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufbb1", "\ufbd3"-"\ufd3d", "\ufd50"-"\ufd8f", "\ufd92"-"\ufdc7", "\ufdf0"-"\ufdfb", "\ufe33"-"\ufe34", "\ufe4d"-"\ufe4f", "\ufe69", "\ufe70"-"\ufe72", "\ufe74", "\ufe76"-"\ufefc", "\uff04", "\uff21"-"\uff3a", "\uff3f", "\uff41"-"\uff5a", "\uff65"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7", "\uffda"-"\uffdc", "\uffe0"-"\uffe1", "\uffe5"-"\uffe6"]>
   | <#PART_LETTER: ["\u0000"-"\u0008", "\u000e"-"\u001b", "$", "0"-"9", "A"-"Z", "_", "a"-"z", "\u007f"-"\u009f", "\u00a2"-"\u00a5", "\u00aa", "\u00b5", "\u00ba", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u021f", "\u0222"-"\u0233", "\u0250"-"\u02ad", "\u02b0"-"\u02b8", "\u02bb"-"\u02c1", "\u02d0"-"\u02d1", "\u02e0"-"\u02e4", "\u02ee", "\u0300"-"\u034e", "\u0360"-"\u0362", "\u037a", "\u0386", "\u0388"-"\u038a", "\u038c", "\u038e"-"\u03a1", "\u03a3"-"\u03ce", "\u03d0"-"\u03d7", "\u03da"-"\u03f3", "\u0400"-"\u0481", "\u0483"-"\u0486", "\u048c"-"\u04c4", "\u04c7"-"\u04c8", "\u04cb"-"\u04cc", "\u04d0"-"\u04f5", "\u04f8"-"\u04f9", "\u0531"-"\u0556", "\u0559", "\u0561"-"\u0587", "\u0591"-"\u05a1", "\u05a3"-"\u05b9", "\u05bb"-"\u05bd", "\u05bf", "\u05c1"-"\u05c2", "\u05c4", "\u05d0"-"\u05ea", "\u05f0"-"\u05f2", "\u0621"-"\u063a", "\u0640"-"\u0655", "\u0660"-"\u0669", "\u0670"-"\u06d3", "\u06d5"-"\u06dc", "\u06df"-"\u06e8", "\u06ea"-"\u06ed", "\u06f0"-"\u06fc", "\u070f"-"\u072c", "\u0730"-"\u074a", "\u0780"-"\u07b0", "\u0901"-"\u0903", "\u0905"-"\u0939", "\u093c"-"\u094d", "\u0950"-"\u0954", "\u0958"-"\u0963", "\u0966"-"\u096f", "\u0981"-"\u0983", "\u0985"-"\u098c", "\u098f"-"\u0990", "\u0993"-"\u09a8", "\u09aa"-"\u09b0", "\u09b2", "\u09b6"-"\u09b9", "\u09bc", "\u09be"-"\u09c4", "\u09c7"-"\u09c8", "\u09cb"-"\u09cd", "\u09d7", "\u09dc"-"\u09dd", "\u09df"-"\u09e3", "\u09e6"-"\u09f3", "\u0a02", "\u0a05"-"\u0a0a", "\u0a0f"-"\u0a10", "\u0a13"-"\u0a28", "\u0a2a"-"\u0a30", "\u0a32"-"\u0a33", "\u0a35"-"\u0a36", "\u0a38"-"\u0a39", "\u0a3c", "\u0a3e"-"\u0a42", "\u0a47"-"\u0a48", "\u0a4b"-"\u0a4d", "\u0a59"-"\u0a5c", "\u0a5e", "\u0a66"-"\u0a74", "\u0a81"-"\u0a83", "\u0a85"-"\u0a8b", "\u0a8d", "\u0a8f"-"\u0a91", "\u0a93"-"\u0aa8", "\u0aaa"-"\u0ab0", "\u0ab2"-"\u0ab3", "\u0ab5"-"\u0ab9", "\u0abc"-"\u0ac5", "\u0ac7"-"\u0ac9", "\u0acb"-"\u0acd", "\u0ad0", "\u0ae0", "\u0ae6"-"\u0aef", "\u0b01"-"\u0b03", "\u0b05"-"\u0b0c", "\u0b0f"-"\u0b10", "\u0b13"-"\u0b28", "\u0b2a"-"\u0b30", "\u0b32"-"\u0b33", "\u0b36"-"\u0b39", "\u0b3c"-"\u0b43", "\u0b47"-"\u0b48", "\u0b4b"-"\u0b4d", "\u0b56"-"\u0b57", "\u0b5c"-"\u0b5d", "\u0b5f"-"\u0b61", "\u0b66"-"\u0b6f", "\u0b82"-"\u0b83", "\u0b85"-"\u0b8a", "\u0b8e"-"\u0b90", "\u0b92"-"\u0b95", "\u0b99"-"\u0b9a", "\u0b9c", "\u0b9e"-"\u0b9f", "\u0ba3"-"\u0ba4", "\u0ba8"-"\u0baa", "\u0bae"-"\u0bb5", "\u0bb7"-"\u0bb9", "\u0bbe"-"\u0bc2", "\u0bc6"-"\u0bc8", "\u0bca"-"\u0bcd", "\u0bd7", "\u0be7"-"\u0bef", "\u0c01"-"\u0c03", "\u0c05"-"\u0c0c", "\u0c0e"-"\u0c10", "\u0c12"-"\u0c28", "\u0c2a"-"\u0c33", "\u0c35"-"\u0c39", "\u0c3e"-"\u0c44", "\u0c46"-"\u0c48", "\u0c4a"-"\u0c4d", "\u0c55"-"\u0c56", "\u0c60"-"\u0c61", "\u0c66"-"\u0c6f", "\u0c82"-"\u0c83", "\u0c85"-"\u0c8c", "\u0c8e"-"\u0c90", "\u0c92"-"\u0ca8", "\u0caa"-"\u0cb3", "\u0cb5"-"\u0cb9", "\u0cbe"-"\u0cc4", "\u0cc6"-"\u0cc8", "\u0cca"-"\u0ccd", "\u0cd5"-"\u0cd6", "\u0cde", "\u0ce0"-"\u0ce1", "\u0ce6"-"\u0cef", "\u0d02"-"\u0d03", "\u0d05"-"\u0d0c", "\u0d0e"-"\u0d10", "\u0d12"-"\u0d28", "\u0d2a"-"\u0d39", "\u0d3e"-"\u0d43", "\u0d46"-"\u0d48", "\u0d4a"-"\u0d4d", "\u0d57", "\u0d60"-"\u0d61", "\u0d66"-"\u0d6f", "\u0d82"-"\u0d83", "\u0d85"-"\u0d96", "\u0d9a"-"\u0db1", "\u0db3"-"\u0dbb", "\u0dbd", "\u0dc0"-"\u0dc6", "\u0dca", "\u0dcf"-"\u0dd4", "\u0dd6", "\u0dd8"-"\u0ddf", "\u0df2"-"\u0df3", "\u0e01"-"\u0e3a", "\u0e3f"-"\u0e4e", "\u0e50"-"\u0e59", "\u0e81"-"\u0e82", "\u0e84", "\u0e87"-"\u0e88", "\u0e8a", "\u0e8d", "\u0e94"-"\u0e97", "\u0e99"-"\u0e9f", "\u0ea1"-"\u0ea3", "\u0ea5", "\u0ea7", "\u0eaa"-"\u0eab", "\u0ead"-"\u0eb9", "\u0ebb"-"\u0ebd", "\u0ec0"-"\u0ec4", "\u0ec6", "\u0ec8"-"\u0ecd", "\u0ed0"-"\u0ed9", "\u0edc"-"\u0edd", "\u0f00", "\u0f18"-"\u0f19", "\u0f20"-"\u0f29", "\u0f35", "\u0f37", "\u0f39", "\u0f3e"-"\u0f47", "\u0f49"-"\u0f6a", "\u0f71"-"\u0f84", "\u0f86"-"\u0f8b", "\u0f90"-"\u0f97", "\u0f99"-"\u0fbc", "\u0fc6", "\u1000"-"\u1021", "\u1023"-"\u1027", "\u1029"-"\u102a", "\u102c"-"\u1032", "\u1036"-"\u1039", "\u1040"-"\u1049", "\u1050"-"\u1059", "\u10a0"-"\u10c5", "\u10d0"-"\u10f6", "\u1100"-"\u1159", "\u115f"-"\u11a2", "\u11a8"-"\u11f9", "\u1200"-"\u1206", "\u1208"-"\u1246", "\u1248", "\u124a"-"\u124d", "\u1250"-"\u1256", "\u1258", "\u125a"-"\u125d", "\u1260"-"\u1286", "\u1288", "\u128a"-"\u128d", "\u1290"-"\u12ae", "\u12b0", "\u12b2"-"\u12b5", "\u12b8"-"\u12be", "\u12c0", "\u12c2"-"\u12c5", "\u12c8"-"\u12ce", "\u12d0"-"\u12d6", "\u12d8"-"\u12ee", "\u12f0"-"\u130e", "\u1310", "\u1312"-"\u1315", "\u1318"-"\u131e", "\u1320"-"\u1346", "\u1348"-"\u135a", "\u1369"-"\u1371", "\u13a0"-"\u13f4", "\u1401"-"\u166c", "\u166f"-"\u1676", "\u1681"-"\u169a", "\u16a0"-"\u16ea", "\u1780"-"\u17d3", "\u17db", "\u17e0"-"\u17e9", "\u180b"-"\u180e", "\u1810"-"\u1819", "\u1820"-"\u1877", "\u1880"-"\u18a9", "\u1e00"-"\u1e9b", "\u1ea0"-"\u1ef9", "\u1f00"-"\u1f15", "\u1f18"-"\u1f1d", "\u1f20"-"\u1f45", "\u1f48"-"\u1f4d", "\u1f50"-"\u1f57", "\u1f59", "\u1f5b", "\u1f5d", "\u1f5f"-"\u1f7d", "\u1f80"-"\u1fb4", "\u1fb6"-"\u1fbc", "\u1fbe", "\u1fc2"-"\u1fc4", "\u1fc6"-"\u1fcc", "\u1fd0"-"\u1fd3", "\u1fd6"-"\u1fdb", "\u1fe0"-"\u1fec", "\u1ff2"-"\u1ff4", "\u1ff6"-"\u1ffc", "\u200c"-"\u200f", "\u202a"-"\u202e", "\u203f"-"\u2040", "\u206a"-"\u206f", "\u207f", "\u20a0"-"\u20af", "\u20d0"-"\u20dc", "\u20e1", "\u2102", "\u2107", "\u210a"-"\u2113", "\u2115", "\u2119"-"\u211d", "\u2124", "\u2126", "\u2128", "\u212a"-"\u212d", "\u212f"-"\u2131", "\u2133"-"\u2139", "\u2160"-"\u2183", "\u3005"-"\u3007", "\u3021"-"\u302f", "\u3031"-"\u3035", "\u3038"-"\u303a", "\u3041"-"\u3094", "\u3099"-"\u309a", "\u309d"-"\u309e", "\u30a1"-"\u30fe", "\u3105"-"\u312c", "\u3131"-"\u318e", "\u31a0"-"\u31b7", "\u3400"-"\u4db5", "\u4e00"-"\u9fa5", "\ua000"-"\ua48c", "\uac00"-"\ud7a3", "\uf900"-"\ufa2d", "\ufb00"-"\ufb06", "\ufb13"-"\ufb17", "\ufb1d"-"\ufb28", "\ufb2a"-"\ufb36", "\ufb38"-"\ufb3c", "\ufb3e", "\ufb40"-"\ufb41", "\ufb43"-"\ufb44", "\ufb46"-"\ufbb1", "\ufbd3"-"\ufd3d", "\ufd50"-"\ufd8f", "\ufd92"-"\ufdc7", "\ufdf0"-"\ufdfb", "\ufe20"-"\ufe23", "\ufe33"-"\ufe34", "\ufe4d"-"\ufe4f", "\ufe69", "\ufe70"-"\ufe72", "\ufe74", "\ufe76"-"\ufefc", "\ufeff", "\uff04", "\uff10"-"\uff19", "\uff21"-"\uff3a", "\uff3f", "\uff41"-"\uff5a", "\uff65"-"\uffbe", "\uffc2"-"\uffc7", "\uffca"-"\uffcf", "\uffd2"-"\uffd7", "\uffda"-"\uffdc", "\uffe0"-"\uffe1", "\uffe5"-"\uffe6", "\ufff9"-"\ufffb"]>
}

TOKEN :
{
   <LPAREN: "(">
   | <RPAREN: ")">
   | <LBRACE: "{">
   | <RBRACE: "}">
   | <LBRACKET: "[">
   | <RBRACKET: "]">
   | <SEMICOLON: ";">
   | <COMMA: ",">
   | <DOT: ".">
   | <AT: "@">
}

TOKEN :
{
   <ASSIGN: "=">
   | <LT: "<">
   | <BANG: "!">
   | <TILDE: "~">
   | <HOOK: "?">
   | <COLON: ":">
   | <EQ: "==">
   | <LE: "<=">
   | <GE: ">=">
   | <NE: "!=">
   | <SC_OR: "||">
   | <SC_AND: "&&">
   | <INCR: "++">
   | <DECR: "--">
   | <PLUS: "+">
   | <MINUS: "-">
   | <STAR: "*">
   | <SLASH: "/">
   | <BIT_AND: "&">
   | <BIT_OR: "|">
   | <XOR: "^">
   | <REM: "%">
   | <LSHIFT: "<<">
   | <PLUSASSIGN: "+=">
   | <MINUSASSIGN: "-=">
   | <STARASSIGN: "*=">
   | <SLASHASSIGN: "/=">
   | <ANDASSIGN: "&=">
   | <ORASSIGN: "|=">
   | <XORASSIGN: "^=">
   | <REMASSIGN: "%=">
   | <LSHIFTASSIGN: "<<=">
   | <RSIGNEDSHIFTASSIGN: ">>=">
   | <RUNSIGNEDSHIFTASSIGN: ">>>=">
   | <ELLIPSIS: "...">
}

TOKEN :
{
   <RUNSIGNEDSHIFT: ">>>">
      {
         matchedToken.kind = GT;
         ((Token.GTToken)matchedToken).realKind = RUNSIGNEDSHIFT;
         input_stream.backup(2);
      }
   | <RSIGNEDSHIFT: ">>">
      {
         matchedToken.kind = GT;
         ((Token.GTToken)matchedToken).realKind = RSIGNEDSHIFT;
         input_stream.backup(1);
      }
   | <GT: ">">
}

CompilationUnit CompilationUnit() :
{
   NodeOptional n0 = new NodeOptional();
   PackageDeclaration n1;
   NodeListOptional n2 = new NodeListOptional();
   ImportDeclaration n3;
   NodeListOptional n4 = new NodeListOptional();
   TypeDeclaration n5;
   NodeToken n6;
   Token n7;

   
}
{
   (
      n1=PackageDeclaration()
      { n0.addNode(n1); }
   )?
   (
      n3=ImportDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   (
      n5=TypeDeclaration()
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   n7=<EOF> { 
      n7.beginColumn++; n7.endColumn++;
      n6 = JTBToolkit.makeNodeToken(n7);
   }
   
   { return new CompilationUnit(n0,n2,n4,n6); }
}

PackageDeclaration PackageDeclaration() :
{
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="package" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new PackageDeclaration(n0,n2,n3); }
}

ImportDeclaration ImportDeclaration() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   Name n5;
   NodeOptional n6 = new NodeOptional();
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1="import" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4="static" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n5=Name()
   (
      { n7 = new NodeSequence(2); }
      n9="." { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11="*" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      { n6.addNode(n7); }
   )?
   n13=";" { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new ImportDeclaration(n0,n2,n5,n6,n12); }
}

Modifiers Modifiers() :
{
   NodeListOptional n0 = new NodeListOptional();
   NodeChoice n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Annotation n24;

   int modifiers = 0;
}
{
   (
      LOOKAHEAD(2)
      (
         (
            n3="public" { n2 = JTBToolkit.makeNodeToken(n3); }
            
            {
               modifiers |= ModifierSet.PUBLIC;
            }
            
            { n1 = new NodeChoice(n2, 0); }
         |
            n5="static" { n4 = JTBToolkit.makeNodeToken(n5); }
            
            {
               modifiers |= ModifierSet.STATIC;
            }
            
            { n1 = new NodeChoice(n4, 1); }
         |
            n7="protected" { n6 = JTBToolkit.makeNodeToken(n7); }
            
            {
               modifiers |= ModifierSet.PROTECTED;
            }
            
            { n1 = new NodeChoice(n6, 2); }
         |
            n9="private" { n8 = JTBToolkit.makeNodeToken(n9); }
            
            {
               modifiers |= ModifierSet.PRIVATE;
            }
            
            { n1 = new NodeChoice(n8, 3); }
         |
            n11="final" { n10 = JTBToolkit.makeNodeToken(n11); }
            
            {
               modifiers |= ModifierSet.FINAL;
            }
            
            { n1 = new NodeChoice(n10, 4); }
         |
            n13="abstract" { n12 = JTBToolkit.makeNodeToken(n13); }
            
            {
               modifiers |= ModifierSet.ABSTRACT;
            }
            
            { n1 = new NodeChoice(n12, 5); }
         |
            n15="synchronized" { n14 = JTBToolkit.makeNodeToken(n15); }
            
            {
               modifiers |= ModifierSet.SYNCHRONIZED;
            }
            
            { n1 = new NodeChoice(n14, 6); }
         |
            n17="native" { n16 = JTBToolkit.makeNodeToken(n17); }
            
            {
               modifiers |= ModifierSet.NATIVE;
            }
            
            { n1 = new NodeChoice(n16, 7); }
         |
            n19="transient" { n18 = JTBToolkit.makeNodeToken(n19); }
            
            {
               modifiers |= ModifierSet.TRANSIENT;
            }
            
            { n1 = new NodeChoice(n18, 8); }
         |
            n21="volatile" { n20 = JTBToolkit.makeNodeToken(n21); }
            
            {
               modifiers |= ModifierSet.VOLATILE;
            }
            
            { n1 = new NodeChoice(n20, 9); }
         |
            n23="strictfp" { n22 = JTBToolkit.makeNodeToken(n23); }
            
            {
               modifiers |= ModifierSet.STRICTFP;
            }
            
            { n1 = new NodeChoice(n22, 10); }
         |
            n24=Annotation()
            { n1 = new NodeChoice(n24, 11); }
         )
         
      )
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   {
      global_modifiers = modifiers;
   }
   
   
   { return new Modifiers(n0); }
}

TypeDeclaration TypeDeclaration() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeSequence n3;
   Modifiers n4;
   NodeChoice n5;
   ClassOrInterfaceDeclaration n6;
   EnumDeclaration n7;
   AnnotationTypeDeclaration n8;

   int modifiers;
}
{
   (
      n2=";" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n3 = new NodeSequence(3); }
      n4=Modifiers()
      { n3.addNode(n4); }
      
      {
         modifiers = global_modifiers;
      }
      
      (
         (
            n6=ClassOrInterfaceDeclaration(modifiers)
            { n5 = new NodeChoice(n6, 0); }
         |
            n7=EnumDeclaration(modifiers)
            { n5 = new NodeChoice(n7, 1); }
         |
            n8=AnnotationTypeDeclaration(modifiers)
            { n5 = new NodeChoice(n8, 2); }
         )
         
      )
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new TypeDeclaration(n0); }
}

ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(int modifiers) :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeOptional n7 = new NodeOptional();
   TypeParameters n8;
   NodeOptional n9 = new NodeOptional();
   ExtendsList n10;
   NodeOptional n11 = new NodeOptional();
   ImplementsList n12;
   ClassOrInterfaceBody n13;

   boolean isInterface = false;
}
{
   (
      (
         n2="class" { n1 = JTBToolkit.makeNodeToken(n2); }
         { n0 = new NodeChoice(n1, 0); }
      |
         n4="interface" { n3 = JTBToolkit.makeNodeToken(n4); }
         
         {
            isInterface = true;
         }
         
         { n0 = new NodeChoice(n3, 1); }
      )
      
   )
   n6=<IDENTIFIER> { n5 = JTBToolkit.makeNodeToken(n6); }
   (
      n8=TypeParameters()
      { n7.addNode(n8); }
   )?
   (
      n10=ExtendsList(isInterface)
      { n9.addNode(n10); }
   )?
   (
      n12=ImplementsList(isInterface)
      { n11.addNode(n12); }
   )?
   n13=ClassOrInterfaceBody(isInterface)
   
   { return new ClassOrInterfaceDeclaration(n0,n5,n7,n9,n11,n13); }
}

ExtendsList ExtendsList(boolean isInterface) :
{
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;

   boolean extendsMoreThanOne = false;
}
{
   n1="extends" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassOrInterfaceType()
   (
      { n4 = new NodeSequence(3); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=ClassOrInterfaceType()
      { n4.addNode(n7); }
      
      {
         extendsMoreThanOne = true;
      }
      
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   {
      if ( extendsMoreThanOne && !isInterface )
         throw new ParseException("A class cannot extend more than one other class");
   }
   
   
   { return new ExtendsList(n0,n2,n3); }
}

ImplementsList ImplementsList(boolean isInterface) :
{
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;

   
}
{
   n1="implements" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassOrInterfaceType()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=ClassOrInterfaceType()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   {
      if ( isInterface )
         throw new ParseException("An interface cannot implement other interfaces");
   }
   
   
   { return new ImplementsList(n0,n2,n3); }
}

EnumDeclaration EnumDeclaration(int modifiers) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeOptional n4 = new NodeOptional();
   ImplementsList n5;
   EnumBody n6;

   
}
{
   n1="enum" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      n5=ImplementsList(false)
      { n4.addNode(n5); }
   )?
   n6=EnumBody()
   
   { return new EnumDeclaration(n0,n2,n4,n6); }
}

EnumBody EnumBody() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   EnumConstant n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   EnumConstant n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeListOptional n17;
   ClassOrInterfaceBodyDeclaration n18;
   NodeToken n19;
   Token n20;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=EnumConstant()
      { n3.addNode(n4); }
      (
         LOOKAHEAD(2)
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=EnumConstant()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   (
      n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   (
      { n17 = new NodeListOptional(); }
      { n14 = new NodeSequence(2); }
      n16=";" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      (
         n18=ClassOrInterfaceBodyDeclaration(false)
         { n17.addNode(n18); }
      )*
      { n17.nodes.trimToSize(); }
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   n20="}" { n19 = JTBToolkit.makeNodeToken(n20); }
   
   { return new EnumBody(n0,n2,n10,n13,n19); }
}

EnumConstant EnumConstant() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Arguments n3;
   NodeOptional n4 = new NodeOptional();
   ClassOrInterfaceBody n5;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Arguments()
      { n2.addNode(n3); }
   )?
   (
      n5=ClassOrInterfaceBody(false)
      { n4.addNode(n5); }
   )?
   
   { return new EnumConstant(n0,n2,n4); }
}

TypeParameters TypeParameters() :
{
   NodeToken n0;
   Token n1;
   TypeParameter n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeParameter n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeParameter()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=TypeParameter()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n9=">" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new TypeParameters(n0,n2,n3,n8); }
}

TypeParameter TypeParameter() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeBound n3;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=TypeBound()
      { n2.addNode(n3); }
   )?
   
   { return new TypeParameter(n0,n2); }
}

TypeBound TypeBound() :
{
   NodeToken n0;
   Token n1;
   ClassOrInterfaceType n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   ClassOrInterfaceType n7;

   
}
{
   n1="extends" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=ClassOrInterfaceType()
   (
      { n4 = new NodeSequence(2); }
      n6="&" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=ClassOrInterfaceType()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new TypeBound(n0,n2,n3); }
}

ClassOrInterfaceBody ClassOrInterfaceBody(boolean isInterface) :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   ClassOrInterfaceBodyDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ClassOrInterfaceBodyDeclaration(isInterface)
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ClassOrInterfaceBody(n0,n2,n4); }
}

ClassOrInterfaceBodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) :
{
   NodeChoice n0;
   Initializer n1;
   NodeSequence n2;
   Modifiers n3;
   NodeChoice n4;
   ClassOrInterfaceDeclaration n5;
   EnumDeclaration n6;
   ConstructorDeclaration n7;
   FieldDeclaration n8;
   MethodDeclaration n9;
   NodeToken n10;
   Token n11;

   boolean isNestedInterface = false;int modifiers;
}
{
   (
      LOOKAHEAD(2)
      n1=Initializer()
      
      {
         if ( isInterface )
            throw new ParseException("An interface cannot have initializers");
      }
      
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(3); }
      n3=Modifiers()
      { n2.addNode(n3); }
      
      {
         modifiers = global_modifiers;
      }
      
      (
         (
            n5=ClassOrInterfaceDeclaration(modifiers)
            { n4 = new NodeChoice(n5, 0); }
         |
            n6=EnumDeclaration(modifiers)
            { n4 = new NodeChoice(n6, 1); }
         |
            LOOKAHEAD([ TypeParameters() ] <IDENTIFIER> "(")
            n7=ConstructorDeclaration()
            { n4 = new NodeChoice(n7, 2); }
         |
            LOOKAHEAD(Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ))
            n8=FieldDeclaration(modifiers)
            { n4 = new NodeChoice(n8, 3); }
         |
            n9=MethodDeclaration(modifiers)
            { n4 = new NodeChoice(n9, 4); }
         )
         
      )
      { n2.addNode(n4); }
      { n0 = new NodeChoice(n2, 1); }
   |
      n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n0 = new NodeChoice(n10, 2); }
   )
   
   { return new ClassOrInterfaceBodyDeclaration(n0); }
}

FieldDeclaration FieldDeclaration(int modifiers) :
{
   Type n0;
   VariableDeclarator n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   VariableDeclarator n6;
   NodeToken n7;
   Token n8;

   
}
{
   n0=Type()
   n1=VariableDeclarator()
   (
      { n3 = new NodeSequence(2); }
      n5="," { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=VariableDeclarator()
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new FieldDeclaration(n0,n1,n2,n7); }
}

VariableDeclarator VariableDeclarator() :
{
   VariableDeclaratorId n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   VariableInitializer n5;

   
}
{
   n0=VariableDeclaratorId()
   (
      { n2 = new NodeSequence(2); }
      n4="=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=VariableInitializer()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new VariableDeclarator(n0,n1); }
}

VariableDeclaratorId VariableDeclaratorId() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7="]" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new VariableDeclaratorId(n0,n2); }
}

VariableInitializer VariableInitializer() :
{
   NodeChoice n0;
   ArrayInitializer n1;
   Expression n2;

   
}
{
   (
      n1=ArrayInitializer()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=Expression()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new VariableInitializer(n0); }
}

ArrayInitializer ArrayInitializer() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   VariableInitializer n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   VariableInitializer n9;
   NodeOptional n10 = new NodeOptional();
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=VariableInitializer()
      { n3.addNode(n4); }
      (
         LOOKAHEAD(2)
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=VariableInitializer()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   (
      n12="," { n11 = JTBToolkit.makeNodeToken(n12); }
      { n10.addNode(n11); }
   )?
   n14="}" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new ArrayInitializer(n0,n2,n10,n13); }
}

MethodDeclaration MethodDeclaration(int modifiers) :
{
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   ResultType n2;
   MethodDeclarator n3;
   NodeOptional n4 = new NodeOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NameList n8;
   NodeChoice n9;
   Block n10;
   NodeToken n11;
   Token n12;

   
}
{
   (
      n1=TypeParameters()
      { n0.addNode(n1); }
   )?
   n2=ResultType()
   n3=MethodDeclarator()
   (
      { n5 = new NodeSequence(2); }
      n7="throws" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=NameList()
      { n5.addNode(n8); }
      { n4.addNode(n5); }
   )?
   (
      (
         n10=Block()
         { n9 = new NodeChoice(n10, 0); }
      |
         n12=";" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n9 = new NodeChoice(n11, 1); }
      )
      
   )
   
   { return new MethodDeclaration(n0,n2,n3,n4,n9); }
}

MethodDeclarator MethodDeclarator() :
{
   NodeToken n0;
   Token n1;
   FormalParameters n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=FormalParameters()
   (
      { n4 = new NodeSequence(2); }
      n6="[" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   
   { return new MethodDeclarator(n0,n2,n3); }
}

FormalParameters FormalParameters() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   FormalParameter n4;
   NodeListOptional n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n5 = new NodeListOptional(); }
      { n3 = new NodeSequence(2); }
      n4=FormalParameter()
      { n3.addNode(n4); }
      (
         { n6 = new NodeSequence(2); }
         n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
         { n6.addNode(n7); }
         n9=FormalParameter()
         { n6.addNode(n9); }
         { n5.addNode(n6); }
      )*
      { n5.nodes.trimToSize(); }
      { n3.addNode(n5); }
      { n2.addNode(n3); }
   )?
   n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new FormalParameters(n0,n2,n10); }
}

FormalParameter FormalParameter() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Type n3;
   NodeOptional n4 = new NodeOptional();
   NodeToken n5;
   Token n6;
   VariableDeclaratorId n7;

   
}
{
   (
      n2="final" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=Type()
   (
      n6="..." { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
   )?
   n7=VariableDeclaratorId()
   
   { return new FormalParameter(n0,n3,n4,n7); }
}

ConstructorDeclaration ConstructorDeclaration() :
{
   NodeOptional n0 = new NodeOptional();
   TypeParameters n1;
   NodeToken n2;
   Token n3;
   FormalParameters n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NameList n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   ExplicitConstructorInvocation n13;
   NodeListOptional n14 = new NodeListOptional();
   BlockStatement n15;
   NodeToken n16;
   Token n17;

   
}
{
   (
      n1=TypeParameters()
      { n0.addNode(n1); }
   )?
   n3=<IDENTIFIER> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=FormalParameters()
   (
      { n6 = new NodeSequence(2); }
      n8="throws" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=NameList()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )?
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   (
      LOOKAHEAD(ExplicitConstructorInvocation())
      n13=ExplicitConstructorInvocation()
      { n12.addNode(n13); }
   )?
   (
      n15=BlockStatement()
      { n14.addNode(n15); }
   )*
   { n14.nodes.trimToSize(); }
   n17="}" { n16 = JTBToolkit.makeNodeToken(n17); }
   
   { return new ConstructorDeclaration(n0,n2,n4,n5,n10,n12,n14,n16); }
}

ExplicitConstructorInvocation ExplicitConstructorInvocation() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Arguments n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   PrimaryExpression n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   Arguments n15;
   NodeToken n16;
   Token n17;

   
}
{
   (
      LOOKAHEAD("this" Arguments() ";")
      { n1 = new NodeSequence(4); }
      n3="this" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Arguments()
      { n1.addNode(n4); }
      n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(4); }
      (
         LOOKAHEAD(2)
         { n9 = new NodeSequence(2); }
         n10=PrimaryExpression()
         { n9.addNode(n10); }
         n12="." { n11 = JTBToolkit.makeNodeToken(n12); }
         { n9.addNode(n11); }
         { n8.addNode(n9); }
      )?
      { n7.addNode(n8); }
      n14="super" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n7.addNode(n13); }
      n15=Arguments()
      { n7.addNode(n15); }
      n17=";" { n16 = JTBToolkit.makeNodeToken(n17); }
      { n7.addNode(n16); }
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new ExplicitConstructorInvocation(n0); }
}

Initializer Initializer() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Block n3;

   
}
{
   (
      n2="static" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=Block()
   
   { return new Initializer(n0,n3); }
}

Type Type() :
{
   NodeChoice n0;
   ReferenceType n1;
   PrimitiveType n2;

   
}
{
   (
      LOOKAHEAD(2)
      n1=ReferenceType()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PrimitiveType()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new Type(n0); }
}

ReferenceType ReferenceType() :
{
   NodeChoice n0;
   NodeSequence n1;
   PrimitiveType n2;
   NodeList n3 = new NodeList();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeSequence n9;
   NodeSequence n10;
   ClassOrInterfaceType n11;
   NodeListOptional n12 = new NodeListOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=PrimitiveType()
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         { n4 = new NodeSequence(2); }
         n6="[" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )+
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n9 = new NodeSequence(2); }
      (
         { n10 = new NodeSequence(1); }
         n11=ClassOrInterfaceType()
         { n10.addNode(n11); }
         
      )
      { n9.addNode(n10); }
      (
         LOOKAHEAD(2)
         { n13 = new NodeSequence(2); }
         n15="[" { n14 = JTBToolkit.makeNodeToken(n15); }
         { n13.addNode(n14); }
         n17="]" { n16 = JTBToolkit.makeNodeToken(n17); }
         { n13.addNode(n16); }
         { n12.addNode(n13); }
      )*
      { n12.nodes.trimToSize(); }
      { n9.addNode(n12); }
      { n0 = new NodeChoice(n9, 1); }
   )
   
   { return new ReferenceType(n0); }
}

ClassOrInterfaceType ClassOrInterfaceType() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   TypeArguments n3;
   NodeListOptional n4 = new NodeListOptional();
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeOptional n10;
   TypeArguments n11;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      n3=TypeArguments()
      { n2.addNode(n3); }
   )?
   (
      LOOKAHEAD(2)
      { n10 = new NodeOptional(); }
      { n5 = new NodeSequence(3); }
      n7="." { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n9=<IDENTIFIER> { n8 = JTBToolkit.makeNodeToken(n9); }
      { n5.addNode(n8); }
      (
         LOOKAHEAD(2)
         n11=TypeArguments()
         { n10.addNode(n11); }
      )?
      { n5.addNode(n10); }
      { n4.addNode(n5); }
   )*
   { n4.nodes.trimToSize(); }
   
   { return new ClassOrInterfaceType(n0,n2,n4); }
}

TypeArguments TypeArguments() :
{
   NodeToken n0;
   Token n1;
   TypeArgument n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   TypeArgument n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="<" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeArgument()
   (
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=TypeArgument()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n9=">" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new TypeArguments(n0,n2,n3,n8); }
}

TypeArgument TypeArgument() :
{
   NodeChoice n0;
   ReferenceType n1;
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   WildcardBounds n6;

   
}
{
   (
      n1=ReferenceType()
      { n0 = new NodeChoice(n1, 0); }
   |
      { n2 = new NodeSequence(2); }
      n4="?" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      (
         n6=WildcardBounds()
         { n5.addNode(n6); }
      )?
      { n2.addNode(n5); }
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new TypeArgument(n0); }
}

WildcardBounds WildcardBounds() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   ReferenceType n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   ReferenceType n8;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3="extends" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=ReferenceType()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n5 = new NodeSequence(2); }
      n7="super" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=ReferenceType()
      { n5.addNode(n8); }
      { n0 = new NodeChoice(n5, 1); }
   )
   
   { return new WildcardBounds(n0); }
}

PrimitiveType PrimitiveType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;

   
}
{
   (
      n2="boolean" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="char" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="byte" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="short" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="int" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="long" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="float" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16="double" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   )
   
   { return new PrimitiveType(n0); }
}

ResultType ResultType() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   Type n3;

   
}
{
   (
      n2="void" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n3=Type()
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new ResultType(n0); }
}

Name Name() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      LOOKAHEAD(2)
      { n3 = new NodeSequence(2); }
      n5="." { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   
   { return new Name(n0,n2); }
}

NameList NameList() :
{
   Name n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Name n5;

   
}
{
   n0=Name()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Name()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new NameList(n0,n1); }
}

Expression Expression() :
{
   ConditionalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   AssignmentOperator n3;
   Expression n4;

   
}
{
   n0=ConditionalExpression()
   (
      LOOKAHEAD(2)
      { n2 = new NodeSequence(2); }
      n3=AssignmentOperator()
      { n2.addNode(n3); }
      n4=Expression()
      { n2.addNode(n4); }
      { n1.addNode(n2); }
   )?
   
   { return new Expression(n0,n1); }
}

AssignmentOperator AssignmentOperator() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;

   
}
{
   (
      n2="=" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="*=" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6="/=" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8="%=" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n10="+=" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n0 = new NodeChoice(n9, 4); }
   |
      n12="-=" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n0 = new NodeChoice(n11, 5); }
   |
      n14="<<=" { n13 = JTBToolkit.makeNodeToken(n14); }
      { n0 = new NodeChoice(n13, 6); }
   |
      n16=">>=" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n0 = new NodeChoice(n15, 7); }
   |
      n18=">>>=" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n0 = new NodeChoice(n17, 8); }
   |
      n20="&=" { n19 = JTBToolkit.makeNodeToken(n20); }
      { n0 = new NodeChoice(n19, 9); }
   |
      n22="^=" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n0 = new NodeChoice(n21, 10); }
   |
      n24="|=" { n23 = JTBToolkit.makeNodeToken(n24); }
      { n0 = new NodeChoice(n23, 11); }
   )
   
   { return new AssignmentOperator(n0); }
}

ConditionalExpression ConditionalExpression() :
{
   ConditionalOrExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;
   NodeToken n6;
   Token n7;
   Expression n8;

   
}
{
   n0=ConditionalOrExpression()
   (
      { n2 = new NodeSequence(4); }
      n4="?" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      n7=":" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n2.addNode(n6); }
      n8=Expression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )?
   
   { return new ConditionalExpression(n0,n1); }
}

ConditionalOrExpression ConditionalOrExpression() :
{
   ConditionalAndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ConditionalAndExpression n5;

   
}
{
   n0=ConditionalAndExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="||" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ConditionalAndExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalOrExpression(n0,n1); }
}

ConditionalAndExpression ConditionalAndExpression() :
{
   InclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   InclusiveOrExpression n5;

   
}
{
   n0=InclusiveOrExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=InclusiveOrExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ConditionalAndExpression(n0,n1); }
}

InclusiveOrExpression InclusiveOrExpression() :
{
   ExclusiveOrExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   ExclusiveOrExpression n5;

   
}
{
   n0=ExclusiveOrExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="|" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=ExclusiveOrExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new InclusiveOrExpression(n0,n1); }
}

ExclusiveOrExpression ExclusiveOrExpression() :
{
   AndExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   AndExpression n5;

   
}
{
   n0=AndExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="^" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=AndExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ExclusiveOrExpression(n0,n1); }
}

AndExpression AndExpression() :
{
   EqualityExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   EqualityExpression n5;

   
}
{
   n0=EqualityExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="&" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=EqualityExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AndExpression(n0,n1); }
}

EqualityExpression EqualityExpression() :
{
   InstanceOfExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   InstanceOfExpression n8;

   
}
{
   n0=InstanceOfExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="==" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="!=" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=InstanceOfExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new EqualityExpression(n0,n1); }
}

InstanceOfExpression InstanceOfExpression() :
{
   RelationalExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Type n5;

   
}
{
   n0=RelationalExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="instanceof" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Type()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new InstanceOfExpression(n0,n1); }
}

RelationalExpression RelationalExpression() :
{
   ShiftExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   ShiftExpression n12;

   
}
{
   n0=ShiftExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="<" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7=">" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9="<=" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         |
            n11=">=" { n10 = JTBToolkit.makeNodeToken(n11); }
            { n3 = new NodeChoice(n10, 3); }
         )
         
      )
      { n2.addNode(n3); }
      n12=ShiftExpression()
      { n2.addNode(n12); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new RelationalExpression(n0,n1); }
}

ShiftExpression ShiftExpression() :
{
   AdditiveExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   RSIGNEDSHIFT n6;
   RUNSIGNEDSHIFT n7;
   AdditiveExpression n8;

   
}
{
   n0=AdditiveExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="<<" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n6=RSIGNEDSHIFT()
            { n3 = new NodeChoice(n6, 1); }
         |
            n7=RUNSIGNEDSHIFT()
            { n3 = new NodeChoice(n7, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n8=AdditiveExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ShiftExpression(n0,n1); }
}

AdditiveExpression AdditiveExpression() :
{
   MultiplicativeExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   MultiplicativeExpression n8;

   
}
{
   n0=MultiplicativeExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="+" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="-" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         )
         
      )
      { n2.addNode(n3); }
      n8=MultiplicativeExpression()
      { n2.addNode(n8); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new AdditiveExpression(n0,n1); }
}

MultiplicativeExpression MultiplicativeExpression() :
{
   UnaryExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeChoice n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   UnaryExpression n10;

   
}
{
   n0=UnaryExpression()
   (
      { n2 = new NodeSequence(2); }
      (
         (
            n5="*" { n4 = JTBToolkit.makeNodeToken(n5); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n7="/" { n6 = JTBToolkit.makeNodeToken(n7); }
            { n3 = new NodeChoice(n6, 1); }
         |
            n9="%" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n3 = new NodeChoice(n8, 2); }
         )
         
      )
      { n2.addNode(n3); }
      n10=UnaryExpression()
      { n2.addNode(n10); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MultiplicativeExpression(n0,n1); }
}

UnaryExpression UnaryExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   PreIncrementExpression n8;
   PreDecrementExpression n9;
   UnaryExpressionNotPlusMinus n10;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4="+" { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6="-" { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n7=UnaryExpression()
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n8=PreIncrementExpression()
      { n0 = new NodeChoice(n8, 1); }
   |
      n9=PreDecrementExpression()
      { n0 = new NodeChoice(n9, 2); }
   |
      n10=UnaryExpressionNotPlusMinus()
      { n0 = new NodeChoice(n10, 3); }
   )
   
   { return new UnaryExpression(n0); }
}

PreIncrementExpression PreIncrementExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="++" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new PreIncrementExpression(n0,n2); }
}

PreDecrementExpression PreDecrementExpression() :
{
   NodeToken n0;
   Token n1;
   PrimaryExpression n2;

   
}
{
   n1="--" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=PrimaryExpression()
   
   { return new PreDecrementExpression(n0,n2); }
}

UnaryExpressionNotPlusMinus UnaryExpressionNotPlusMinus() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   CastExpression n8;
   PostfixExpression n9;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      (
         (
            n4="~" { n3 = JTBToolkit.makeNodeToken(n4); }
            { n2 = new NodeChoice(n3, 0); }
         |
            n6="!" { n5 = JTBToolkit.makeNodeToken(n6); }
            { n2 = new NodeChoice(n5, 1); }
         )
         
      )
      { n1.addNode(n2); }
      n7=UnaryExpression()
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(CastLookahead())
      n8=CastExpression()
      { n0 = new NodeChoice(n8, 1); }
   |
      n9=PostfixExpression()
      { n0 = new NodeChoice(n9, 2); }
   )
   
   { return new UnaryExpressionNotPlusMinus(n0); }
}

CastLookahead CastLookahead() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   NodeSequence n5;
   NodeToken n6;
   Token n7;
   Type n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   Type n16;
   NodeToken n17;
   Token n18;
   NodeChoice n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   Literal n34;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=PrimitiveType()
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD("(" Type() "[")
      { n5 = new NodeSequence(5); }
      n7="(" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n5.addNode(n6); }
      n8=Type()
      { n5.addNode(n8); }
      n10="[" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n5.addNode(n9); }
      n12="]" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n5.addNode(n11); }
      { n0 = new NodeChoice(n5, 1); }
   |
      { n13 = new NodeSequence(4); }
      n15="(" { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n16=Type()
      { n13.addNode(n16); }
      n18=")" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n13.addNode(n17); }
      (
         (
            n21="~" { n20 = JTBToolkit.makeNodeToken(n21); }
            { n19 = new NodeChoice(n20, 0); }
         |
            n23="!" { n22 = JTBToolkit.makeNodeToken(n23); }
            { n19 = new NodeChoice(n22, 1); }
         |
            n25="(" { n24 = JTBToolkit.makeNodeToken(n25); }
            { n19 = new NodeChoice(n24, 2); }
         |
            n27=<IDENTIFIER> { n26 = JTBToolkit.makeNodeToken(n27); }
            { n19 = new NodeChoice(n26, 3); }
         |
            n29="this" { n28 = JTBToolkit.makeNodeToken(n29); }
            { n19 = new NodeChoice(n28, 4); }
         |
            n31="super" { n30 = JTBToolkit.makeNodeToken(n31); }
            { n19 = new NodeChoice(n30, 5); }
         |
            n33="new" { n32 = JTBToolkit.makeNodeToken(n33); }
            { n19 = new NodeChoice(n32, 6); }
         |
            n34=Literal()
            { n19 = new NodeChoice(n34, 7); }
         )
         
      )
      { n13.addNode(n19); }
      { n0 = new NodeChoice(n13, 2); }
   )
   
   { return new CastLookahead(n0); }
}

PostfixExpression PostfixExpression() :
{
   PrimaryExpression n0;
   NodeOptional n1 = new NodeOptional();
   NodeChoice n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n0=PrimaryExpression()
   (
      (
         n4="++" { n3 = JTBToolkit.makeNodeToken(n4); }
         { n2 = new NodeChoice(n3, 0); }
      |
         n6="--" { n5 = JTBToolkit.makeNodeToken(n6); }
         { n2 = new NodeChoice(n5, 1); }
      )
      { n1.addNode(n2); }
   )?
   
   { return new PostfixExpression(n0,n1); }
}

CastExpression CastExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Type n4;
   NodeToken n5;
   Token n6;
   UnaryExpression n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   Type n11;
   NodeToken n12;
   Token n13;
   UnaryExpressionNotPlusMinus n14;

   
}
{
   (
      LOOKAHEAD("(" PrimitiveType())
      { n1 = new NodeSequence(5); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Type()
      { n1.addNode(n4); }
      n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      n7=UnaryExpression()
      { n1.addNode(n7); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(4); }
      n10="(" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=Type()
      { n8.addNode(n11); }
      n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n8.addNode(n12); }
      n14=UnaryExpressionNotPlusMinus()
      { n8.addNode(n14); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new CastExpression(n0); }
}

PrimaryExpression PrimaryExpression() :
{
   PrimaryPrefix n0;
   NodeListOptional n1 = new NodeListOptional();
   PrimarySuffix n2;

   
}
{
   n0=PrimaryPrefix()
   (
      LOOKAHEAD(2)
      n2=PrimarySuffix()
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new PrimaryExpression(n0,n1); }
}

MemberSelector MemberSelector() :
{
   NodeToken n0;
   Token n1;
   TypeArguments n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="." { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=TypeArguments()
   n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new MemberSelector(n0,n2,n3); }
}

PrimaryPrefix PrimaryPrefix() :
{
   NodeChoice n0;
   Literal n1;
   NodeToken n2;
   Token n3;
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   Expression n14;
   NodeToken n15;
   Token n16;
   AllocationExpression n17;
   NodeSequence n18;
   ResultType n19;
   NodeToken n20;
   Token n21;
   NodeToken n22;
   Token n23;
   Name n24;

   
}
{
   (
      n1=Literal()
      { n0 = new NodeChoice(n1, 0); }
   |
      n3="this" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n0 = new NodeChoice(n2, 1); }
   |
      { n4 = new NodeSequence(3); }
      n6="super" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8="." { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      n10=<IDENTIFIER> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n4.addNode(n9); }
      { n0 = new NodeChoice(n4, 2); }
   |
      { n11 = new NodeSequence(3); }
      n13="(" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=Expression()
      { n11.addNode(n14); }
      n16=")" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n11.addNode(n15); }
      { n0 = new NodeChoice(n11, 3); }
   |
      n17=AllocationExpression()
      { n0 = new NodeChoice(n17, 4); }
   |
      LOOKAHEAD(ResultType() "." "class")
      { n18 = new NodeSequence(4); }
      n19=ResultType()
      { n18.addNode(n19); }
      n21="." { n20 = JTBToolkit.makeNodeToken(n21); }
      { n18.addNode(n20); }
      n23="class" { n22 = JTBToolkit.makeNodeToken(n23); }
      { n18.addNode(n22); }
      { n0 = new NodeChoice(n18, 5); }
   |
      n24=Name()
      { n0 = new NodeChoice(n24, 6); }
   )
   
   { return new PrimaryPrefix(n0); }
}

PrimarySuffix PrimarySuffix() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   NodeToken n12;
   Token n13;
   AllocationExpression n14;
   MemberSelector n15;
   NodeSequence n16;
   NodeToken n17;
   Token n18;
   Expression n19;
   NodeToken n20;
   Token n21;
   NodeSequence n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   Arguments n27;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      n3="." { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5="this" { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD(2)
      { n6 = new NodeSequence(3); }
      n8="." { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10="super" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      { n0 = new NodeChoice(n6, 1); }
   |
      LOOKAHEAD(2)
      { n11 = new NodeSequence(3); }
      n13="." { n12 = JTBToolkit.makeNodeToken(n13); }
      { n11.addNode(n12); }
      n14=AllocationExpression()
      { n11.addNode(n14); }
      { n0 = new NodeChoice(n11, 2); }
   |
      LOOKAHEAD(3)
      n15=MemberSelector()
      { n0 = new NodeChoice(n15, 3); }
   |
      { n16 = new NodeSequence(3); }
      n18="[" { n17 = JTBToolkit.makeNodeToken(n18); }
      { n16.addNode(n17); }
      n19=Expression()
      { n16.addNode(n19); }
      n21="]" { n20 = JTBToolkit.makeNodeToken(n21); }
      { n16.addNode(n20); }
      { n0 = new NodeChoice(n16, 4); }
   |
      { n22 = new NodeSequence(2); }
      n24="." { n23 = JTBToolkit.makeNodeToken(n24); }
      { n22.addNode(n23); }
      n26=<IDENTIFIER> { n25 = JTBToolkit.makeNodeToken(n26); }
      { n22.addNode(n25); }
      { n0 = new NodeChoice(n22, 5); }
   |
      n27=Arguments()
      { n0 = new NodeChoice(n27, 6); }
   )
   
   { return new PrimarySuffix(n0); }
}

Literal Literal() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   BooleanLiteral n9;
   NullLiteral n10;

   
}
{
   (
      n2=<INTEGER_LITERAL> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<FLOATING_POINT_LITERAL> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<CHARACTER_LITERAL> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   |
      n8=<STRING_LITERAL> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n0 = new NodeChoice(n7, 3); }
   |
      n9=BooleanLiteral()
      { n0 = new NodeChoice(n9, 4); }
   |
      n10=NullLiteral()
      { n0 = new NodeChoice(n10, 5); }
   )
   
   { return new Literal(n0); }
}

BooleanLiteral BooleanLiteral() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      n2="true" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4="false" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   )
   
   { return new BooleanLiteral(n0); }
}

NullLiteral NullLiteral() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1="null" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new NullLiteral(n0); }
}

Arguments Arguments() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   ArgumentList n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="(" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=ArgumentList()
      { n2.addNode(n3); }
   )?
   n5=")" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Arguments(n0,n2,n4); }
}

ArgumentList ArgumentList() :
{
   Expression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   Expression n5;

   
}
{
   n0=Expression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=Expression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new ArgumentList(n0,n1); }
}

AllocationExpression AllocationExpression() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   PrimitiveType n4;
   ArrayDimsAndInits n5;
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   ClassOrInterfaceType n9;
   NodeOptional n10 = new NodeOptional();
   TypeArguments n11;
   NodeChoice n12;
   ArrayDimsAndInits n13;
   NodeSequence n14;
   Arguments n15;
   NodeOptional n16 = new NodeOptional();
   ClassOrInterfaceBody n17;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(4); }
      n3="new" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=PrimitiveType()
      { n1.addNode(n4); }
      n5=ArrayDimsAndInits()
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n6 = new NodeSequence(4); }
      n8="new" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=ClassOrInterfaceType()
      { n6.addNode(n9); }
      (
         n11=TypeArguments()
         { n10.addNode(n11); }
      )?
      { n6.addNode(n10); }
      (
         (
            n13=ArrayDimsAndInits()
            { n12 = new NodeChoice(n13, 0); }
         |
            { n14 = new NodeSequence(2); }
            n15=Arguments()
            { n14.addNode(n15); }
            (
               n17=ClassOrInterfaceBody(false)
               { n16.addNode(n17); }
            )?
            { n14.addNode(n16); }
            { n12 = new NodeChoice(n14, 1); }
         )
         
      )
      { n6.addNode(n12); }
      { n0 = new NodeChoice(n6, 1); }
   )
   
   { return new AllocationExpression(n0); }
}

ArrayDimsAndInits ArrayDimsAndInits() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeList n2 = new NodeList();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   Expression n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   NodeToken n11;
   Token n12;
   NodeToken n13;
   Token n14;
   NodeSequence n15;
   NodeList n16 = new NodeList();
   NodeSequence n17;
   NodeToken n18;
   Token n19;
   NodeToken n20;
   Token n21;
   ArrayInitializer n22;

   
}
{
   (
      LOOKAHEAD(2)
      { n1 = new NodeSequence(3); }
      (
         LOOKAHEAD(2)
         { n3 = new NodeSequence(3); }
         n5="[" { n4 = JTBToolkit.makeNodeToken(n5); }
         { n3.addNode(n4); }
         n6=Expression()
         { n3.addNode(n6); }
         n8="]" { n7 = JTBToolkit.makeNodeToken(n8); }
         { n3.addNode(n7); }
         { n2.addNode(n3); }
      )+
      { n2.nodes.trimToSize(); }
      { n1.addNode(n2); }
      (
         LOOKAHEAD(2)
         { n10 = new NodeSequence(2); }
         n12="[" { n11 = JTBToolkit.makeNodeToken(n12); }
         { n10.addNode(n11); }
         n14="]" { n13 = JTBToolkit.makeNodeToken(n14); }
         { n10.addNode(n13); }
         { n9.addNode(n10); }
      )*
      { n9.nodes.trimToSize(); }
      { n1.addNode(n9); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n15 = new NodeSequence(2); }
      (
         { n17 = new NodeSequence(2); }
         n19="[" { n18 = JTBToolkit.makeNodeToken(n19); }
         { n17.addNode(n18); }
         n21="]" { n20 = JTBToolkit.makeNodeToken(n21); }
         { n17.addNode(n20); }
         { n16.addNode(n17); }
      )+
      { n16.nodes.trimToSize(); }
      { n15.addNode(n16); }
      n22=ArrayInitializer()
      { n15.addNode(n22); }
      { n0 = new NodeChoice(n15, 1); }
   )
   
   { return new ArrayDimsAndInits(n0); }
}

Statement Statement() :
{
   NodeChoice n0;
   LabeledStatement n1;
   AssertStatement n2;
   Block n3;
   EmptyStatement n4;
   NodeSequence n5;
   StatementExpression n6;
   NodeToken n7;
   Token n8;
   SwitchStatement n9;
   IfStatement n10;
   WhileStatement n11;
   DoStatement n12;
   ForStatement n13;
   BreakStatement n14;
   ContinueStatement n15;
   ReturnStatement n16;
   ThrowStatement n17;
   SynchronizedStatement n18;
   TryStatement n19;

   
}
{
   (
      LOOKAHEAD(2)
      n1=LabeledStatement()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=AssertStatement()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=Block()
      { n0 = new NodeChoice(n3, 2); }
   |
      n4=EmptyStatement()
      { n0 = new NodeChoice(n4, 3); }
   |
      { n5 = new NodeSequence(2); }
      n6=StatementExpression()
      { n5.addNode(n6); }
      n8=";" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n5.addNode(n7); }
      { n0 = new NodeChoice(n5, 4); }
   |
      n9=SwitchStatement()
      { n0 = new NodeChoice(n9, 5); }
   |
      n10=IfStatement()
      { n0 = new NodeChoice(n10, 6); }
   |
      n11=WhileStatement()
      { n0 = new NodeChoice(n11, 7); }
   |
      n12=DoStatement()
      { n0 = new NodeChoice(n12, 8); }
   |
      n13=ForStatement()
      { n0 = new NodeChoice(n13, 9); }
   |
      n14=BreakStatement()
      { n0 = new NodeChoice(n14, 10); }
   |
      n15=ContinueStatement()
      { n0 = new NodeChoice(n15, 11); }
   |
      n16=ReturnStatement()
      { n0 = new NodeChoice(n16, 12); }
   |
      n17=ThrowStatement()
      { n0 = new NodeChoice(n17, 13); }
   |
      n18=SynchronizedStatement()
      { n0 = new NodeChoice(n18, 14); }
   |
      n19=TryStatement()
      { n0 = new NodeChoice(n19, 15); }
   )
   
   { return new Statement(n0); }
}

AssertStatement AssertStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeOptional n3 = new NodeOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="assert" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   (
      { n4 = new NodeSequence(2); }
      n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=Expression()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )?
   n9=";" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new AssertStatement(n0,n2,n3,n8); }
}

LabeledStatement LabeledStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Statement n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=":" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Statement()
   
   { return new LabeledStatement(n0,n2,n4); }
}

Block Block() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   BlockStatement n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=BlockStatement()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new Block(n0,n2,n4); }
}

BlockStatement BlockStatement() :
{
   NodeChoice n0;
   NodeSequence n1;
   LocalVariableDeclaration n2;
   NodeToken n3;
   Token n4;
   Statement n5;
   ClassOrInterfaceDeclaration n6;

   
}
{
   (
      LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
      { n1 = new NodeSequence(3); }
      n2=LocalVariableDeclaration()
      { n1.addNode(n2); }
      n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n5=Statement()
      { n0 = new NodeChoice(n5, 1); }
   |
      n6=ClassOrInterfaceDeclaration(0)
      { n0 = new NodeChoice(n6, 2); }
   )
   
   { return new BlockStatement(n0); }
}

LocalVariableDeclaration LocalVariableDeclaration() :
{
   NodeOptional n0 = new NodeOptional();
   NodeToken n1;
   Token n2;
   Type n3;
   VariableDeclarator n4;
   NodeListOptional n5 = new NodeListOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   VariableDeclarator n9;

   
}
{
   (
      n2="final" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
   )?
   n3=Type()
   n4=VariableDeclarator()
   (
      { n6 = new NodeSequence(2); }
      n8="," { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n9=VariableDeclarator()
      { n6.addNode(n9); }
      { n5.addNode(n6); }
   )*
   { n5.nodes.trimToSize(); }
   
   { return new LocalVariableDeclaration(n0,n3,n4,n5); }
}

EmptyStatement EmptyStatement() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=";" { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new EmptyStatement(n0); }
}

StatementExpression StatementExpression() :
{
   NodeChoice n0;
   PreIncrementExpression n1;
   PreDecrementExpression n2;
   NodeSequence n3;
   PrimaryExpression n4;
   NodeOptional n5 = new NodeOptional();
   NodeChoice n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   NodeSequence n11;
   AssignmentOperator n12;
   Expression n13;

   
}
{
   (
      n1=PreIncrementExpression()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=PreDecrementExpression()
      { n0 = new NodeChoice(n2, 1); }
   |
      { n3 = new NodeSequence(2); }
      n4=PrimaryExpression()
      { n3.addNode(n4); }
      (
         (
            n8="++" { n7 = JTBToolkit.makeNodeToken(n8); }
            { n6 = new NodeChoice(n7, 0); }
         |
            n10="--" { n9 = JTBToolkit.makeNodeToken(n10); }
            { n6 = new NodeChoice(n9, 1); }
         |
            { n11 = new NodeSequence(2); }
            n12=AssignmentOperator()
            { n11.addNode(n12); }
            n13=Expression()
            { n11.addNode(n13); }
            { n6 = new NodeChoice(n11, 2); }
         )
         { n5.addNode(n6); }
      )?
      { n3.addNode(n5); }
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new StatementExpression(n0); }
}

SwitchStatement SwitchStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   NodeListOptional n9 = new NodeListOptional();
   NodeSequence n10;
   SwitchLabel n11;
   NodeListOptional n12;
   BlockStatement n13;
   NodeToken n14;
   Token n15;

   
}
{
   n1="switch" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n8="{" { n7 = JTBToolkit.makeNodeToken(n8); }
   (
      { n12 = new NodeListOptional(); }
      { n10 = new NodeSequence(2); }
      n11=SwitchLabel()
      { n10.addNode(n11); }
      (
         n13=BlockStatement()
         { n12.addNode(n13); }
      )*
      { n12.nodes.trimToSize(); }
      { n10.addNode(n12); }
      { n9.addNode(n10); }
   )*
   { n9.nodes.trimToSize(); }
   n15="}" { n14 = JTBToolkit.makeNodeToken(n15); }
   
   { return new SwitchStatement(n0,n2,n4,n5,n7,n9,n14); }
}

SwitchLabel SwitchLabel() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   NodeSequence n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="case" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expression()
      { n1.addNode(n4); }
      n6=":" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n7 = new NodeSequence(2); }
      n9="default" { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7.addNode(n8); }
      n11=":" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7.addNode(n10); }
      { n0 = new NodeChoice(n7, 1); }
   )
   
   { return new SwitchLabel(n0); }
}

IfStatement IfStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;
   NodeOptional n8 = new NodeOptional();
   NodeSequence n9;
   NodeToken n10;
   Token n11;
   Statement n12;

   
}
{
   n1="if" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   (
      LOOKAHEAD(1)
      { n9 = new NodeSequence(2); }
      n11="else" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
      n12=Statement()
      { n9.addNode(n12); }
      { n8.addNode(n9); }
   )?
   
   { return new IfStatement(n0,n2,n4,n5,n7,n8); }
}

WhileStatement WhileStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Statement n7;

   
}
{
   n1="while" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Statement()
   
   { return new WhileStatement(n0,n2,n4,n5,n7); }
}

DoStatement DoStatement() :
{
   NodeToken n0;
   Token n1;
   Statement n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;
   Expression n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;

   
}
{
   n1="do" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Statement()
   n4="while" { n3 = JTBToolkit.makeNodeToken(n4); }
   n6="(" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Expression()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=";" { n10 = JTBToolkit.makeNodeToken(n11); }
   
   { return new DoStatement(n0,n2,n3,n5,n7,n8,n10); }
}

ForStatement ForStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeChoice n4;
   NodeSequence n5;
   Type n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   Expression n11;
   NodeSequence n12;
   NodeOptional n13 = new NodeOptional();
   ForInit n14;
   NodeToken n15;
   Token n16;
   NodeOptional n17 = new NodeOptional();
   Expression n18;
   NodeToken n19;
   Token n20;
   NodeOptional n21 = new NodeOptional();
   ForUpdate n22;
   NodeToken n23;
   Token n24;
   Statement n25;

   
}
{
   n1="for" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   (
      (
         LOOKAHEAD(Type() <IDENTIFIER> ":")
         { n5 = new NodeSequence(5); }
         n6=Type()
         { n5.addNode(n6); }
         n8=<IDENTIFIER> { n7 = JTBToolkit.makeNodeToken(n8); }
         { n5.addNode(n7); }
         n10=":" { n9 = JTBToolkit.makeNodeToken(n10); }
         { n5.addNode(n9); }
         n11=Expression()
         { n5.addNode(n11); }
         { n4 = new NodeChoice(n5, 0); }
      |
         { n12 = new NodeSequence(5); }
         (
            n14=ForInit()
            { n13.addNode(n14); }
         )?
         { n12.addNode(n13); }
         n16=";" { n15 = JTBToolkit.makeNodeToken(n16); }
         { n12.addNode(n15); }
         (
            n18=Expression()
            { n17.addNode(n18); }
         )?
         { n12.addNode(n17); }
         n20=";" { n19 = JTBToolkit.makeNodeToken(n20); }
         { n12.addNode(n19); }
         (
            n22=ForUpdate()
            { n21.addNode(n22); }
         )?
         { n12.addNode(n21); }
         { n4 = new NodeChoice(n12, 1); }
      )
      
   )
   n24=")" { n23 = JTBToolkit.makeNodeToken(n24); }
   n25=Statement()
   
   { return new ForStatement(n0,n2,n4,n23,n25); }
}

ForInit ForInit() :
{
   NodeChoice n0;
   LocalVariableDeclaration n1;
   StatementExpressionList n2;

   
}
{
   (
      LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
      n1=LocalVariableDeclaration()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=StatementExpressionList()
      { n0 = new NodeChoice(n2, 1); }
   )
   
   { return new ForInit(n0); }
}

StatementExpressionList StatementExpressionList() :
{
   StatementExpression n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   StatementExpression n5;

   
}
{
   n0=StatementExpression()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=StatementExpression()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new StatementExpressionList(n0,n1); }
}

ForUpdate ForUpdate() :
{
   StatementExpressionList n0;

   
}
{
   n0=StatementExpressionList()
   
   { return new ForUpdate(n0); }
}

BreakStatement BreakStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="break" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new BreakStatement(n0,n2,n5); }
}

ContinueStatement ContinueStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   n1="continue" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n4=<IDENTIFIER> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
   )?
   n6=";" { n5 = JTBToolkit.makeNodeToken(n6); }
   
   { return new ContinueStatement(n0,n2,n5); }
}

ReturnStatement ReturnStatement() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   Expression n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="return" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=Expression()
      { n2.addNode(n3); }
   )?
   n5=";" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new ReturnStatement(n0,n2,n4); }
}

ThrowStatement ThrowStatement() :
{
   NodeToken n0;
   Token n1;
   Expression n2;
   NodeToken n3;
   Token n4;

   
}
{
   n1="throw" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Expression()
   n4=";" { n3 = JTBToolkit.makeNodeToken(n4); }
   
   { return new ThrowStatement(n0,n2,n3); }
}

SynchronizedStatement SynchronizedStatement() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   Expression n4;
   NodeToken n5;
   Token n6;
   Block n7;

   
}
{
   n1="synchronized" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=Expression()
   n6=")" { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=Block()
   
   { return new SynchronizedStatement(n0,n2,n4,n5,n7); }
}

TryStatement TryStatement() :
{
   NodeToken n0;
   Token n1;
   Block n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   NodeToken n7;
   Token n8;
   FormalParameter n9;
   NodeToken n10;
   Token n11;
   Block n12;
   NodeOptional n13 = new NodeOptional();
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   Block n17;

   
}
{
   n1="try" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Block()
   (
      { n4 = new NodeSequence(5); }
      n6="catch" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n8="(" { n7 = JTBToolkit.makeNodeToken(n8); }
      { n4.addNode(n7); }
      n9=FormalParameter()
      { n4.addNode(n9); }
      n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
      { n4.addNode(n10); }
      n12=Block()
      { n4.addNode(n12); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      { n14 = new NodeSequence(2); }
      n16="finally" { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n17=Block()
      { n14.addNode(n17); }
      { n13.addNode(n14); }
   )?
   
   { return new TryStatement(n0,n2,n3,n13); }
}

RUNSIGNEDSHIFT RUNSIGNEDSHIFT() :
{
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      LOOKAHEAD({ getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RUNSIGNEDSHIFT })
      { n0 = new NodeSequence(4); }
      n2=">" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
      n4=">" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0.addNode(n3); }
      n6=">" { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0.addNode(n5); }
      
   )
   
   { return new RUNSIGNEDSHIFT(n0); }
}

RSIGNEDSHIFT RSIGNEDSHIFT() :
{
   NodeSequence n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;

   
}
{
   (
      LOOKAHEAD({ getToken(1).kind == GT && ((Token.GTToken)getToken(1)).realKind == RSIGNEDSHIFT })
      { n0 = new NodeSequence(3); }
      n2=">" { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0.addNode(n1); }
      n4=">" { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0.addNode(n3); }
      
   )
   
   { return new RSIGNEDSHIFT(n0); }
}

Annotation Annotation() :
{
   NodeChoice n0;
   NormalAnnotation n1;
   SingleMemberAnnotation n2;
   MarkerAnnotation n3;

   
}
{
   (
      LOOKAHEAD("@" Name() "(" ( <IDENTIFIER> "=" | ")" ))
      n1=NormalAnnotation()
      { n0 = new NodeChoice(n1, 0); }
   |
      LOOKAHEAD("@" Name() "(")
      n2=SingleMemberAnnotation()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=MarkerAnnotation()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new Annotation(n0); }
}

NormalAnnotation NormalAnnotation() :
{
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   NodeOptional n5 = new NodeOptional();
   MemberValuePairs n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1="@" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   (
      n6=MemberValuePairs()
      { n5.addNode(n6); }
   )?
   n8=")" { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new NormalAnnotation(n0,n2,n3,n5,n7); }
}

MarkerAnnotation MarkerAnnotation() :
{
   NodeToken n0;
   Token n1;
   Name n2;

   
}
{
   n1="@" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   
   { return new MarkerAnnotation(n0,n2); }
}

SingleMemberAnnotation SingleMemberAnnotation() :
{
   NodeToken n0;
   Token n1;
   Name n2;
   NodeToken n3;
   Token n4;
   MemberValue n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1="@" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=Name()
   n4="(" { n3 = JTBToolkit.makeNodeToken(n4); }
   n5=MemberValue()
   n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new SingleMemberAnnotation(n0,n2,n3,n5,n6); }
}

MemberValuePairs MemberValuePairs() :
{
   MemberValuePair n0;
   NodeListOptional n1 = new NodeListOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   MemberValuePair n5;

   
}
{
   n0=MemberValuePair()
   (
      { n2 = new NodeSequence(2); }
      n4="," { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=MemberValuePair()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )*
   { n1.nodes.trimToSize(); }
   
   { return new MemberValuePairs(n0,n1); }
}

MemberValuePair MemberValuePair() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   MemberValue n4;

   
}
{
   n1=<IDENTIFIER> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="=" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=MemberValue()
   
   { return new MemberValuePair(n0,n2,n4); }
}

MemberValue MemberValue() :
{
   NodeChoice n0;
   Annotation n1;
   MemberValueArrayInitializer n2;
   ConditionalExpression n3;

   
}
{
   (
      n1=Annotation()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=MemberValueArrayInitializer()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=ConditionalExpression()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new MemberValue(n0); }
}

MemberValueArrayInitializer MemberValueArrayInitializer() :
{
   NodeToken n0;
   Token n1;
   MemberValue n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   MemberValue n7;
   NodeOptional n8 = new NodeOptional();
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MemberValue()
   (
      LOOKAHEAD(2)
      { n4 = new NodeSequence(2); }
      n6="," { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=MemberValue()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   (
      n10="," { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
   )?
   n12="}" { n11 = JTBToolkit.makeNodeToken(n12); }
   
   { return new MemberValueArrayInitializer(n0,n2,n3,n8,n11); }
}

AnnotationTypeDeclaration AnnotationTypeDeclaration(int modifiers) :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   AnnotationTypeBody n6;

   
}
{
   n1="@" { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="interface" { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<IDENTIFIER> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=AnnotationTypeBody()
   
   { return new AnnotationTypeDeclaration(n0,n2,n4,n6); }
}

AnnotationTypeBody AnnotationTypeBody() :
{
   NodeToken n0;
   Token n1;
   NodeListOptional n2 = new NodeListOptional();
   AnnotationTypeMemberDeclaration n3;
   NodeToken n4;
   Token n5;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      n3=AnnotationTypeMemberDeclaration()
      { n2.addNode(n3); }
   )*
   { n2.nodes.trimToSize(); }
   n5="}" { n4 = JTBToolkit.makeNodeToken(n5); }
   
   { return new AnnotationTypeBody(n0,n2,n4); }
}

AnnotationTypeMemberDeclaration AnnotationTypeMemberDeclaration() :
{
   NodeChoice n0;
   NodeSequence n1;
   Modifiers n2;
   NodeChoice n3;
   NodeSequence n4;
   Type n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeOptional n12 = new NodeOptional();
   DefaultValue n13;
   NodeToken n14;
   Token n15;
   ClassOrInterfaceDeclaration n16;
   EnumDeclaration n17;
   AnnotationTypeDeclaration n18;
   FieldDeclaration n19;
   NodeSequence n20;
   NodeToken n21;
   Token n22;

   int modifiers;
}
{
   (
      { n1 = new NodeSequence(3); }
      n2=Modifiers()
      { n1.addNode(n2); }
      
      {
         modifiers = global_modifiers;
      }
      
      (
         (
            LOOKAHEAD(Type() <IDENTIFIER> "(")
            { n4 = new NodeSequence(7); }
            n5=Type()
            { n4.addNode(n5); }
            n7=<IDENTIFIER> { n6 = JTBToolkit.makeNodeToken(n7); }
            { n4.addNode(n6); }
            n9="(" { n8 = JTBToolkit.makeNodeToken(n9); }
            { n4.addNode(n8); }
            n11=")" { n10 = JTBToolkit.makeNodeToken(n11); }
            { n4.addNode(n10); }
            (
               n13=DefaultValue()
               { n12.addNode(n13); }
            )?
            { n4.addNode(n12); }
            n15=";" { n14 = JTBToolkit.makeNodeToken(n15); }
            { n4.addNode(n14); }
            { n3 = new NodeChoice(n4, 0); }
         |
            n16=ClassOrInterfaceDeclaration(modifiers)
            { n3 = new NodeChoice(n16, 1); }
         |
            n17=EnumDeclaration(modifiers)
            { n3 = new NodeChoice(n17, 2); }
         |
            n18=AnnotationTypeDeclaration(modifiers)
            { n3 = new NodeChoice(n18, 3); }
         |
            n19=FieldDeclaration(modifiers)
            { n3 = new NodeChoice(n19, 4); }
         )
         
      )
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      (
         { n20 = new NodeSequence(1); }
         n22=";" { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         
      )
      { n0 = new NodeChoice(n20, 1); }
   )
   
   { return new AnnotationTypeMemberDeclaration(n0); }
}

DefaultValue DefaultValue() :
{
   NodeToken n0;
   Token n1;
   MemberValue n2;

   
}
{
   n1="default" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=MemberValue()
   
   { return new DefaultValue(n0,n2); }
}
